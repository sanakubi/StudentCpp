/*
 * aprox.cpp
 *
 *  Created on: Feb 14, 2023
 *      Author: PC
 */


#include <stdio.h>
//#include <process.h>
#include <math.h>


#define _CRT_SECURE_NO_WARNINGS

//double* a, * b, * x, * y, ** sums;
float a[11], b[11], x[31], y[31], sums[11][11];
//float _x[] = { 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20 };
//float _y[] = { 9.563798, 9.611804, 9.634697, 9.649942, 9.661071, 9.673277, 9.677956, 9.686813, 9.692034, 9.698821, 9.700643, 9.702469, 9.710326, 9.709277, 9.710835, 9.717395, 9.723427, 9.721603, 9.721330, 9.727637, 9.733679, 9.732370, 9.737902, 9.736049, 9.735270, 9.739742, 9.741323, 9.742902, 9.746337, 9.748709, 9.745802, 9.753989, 9.749760, 9.750292, 9.750555, 9.750025, 9.755048, 9.759274, 9.761126, 9.754779, 9.762983, 9.767488, 9.765107, 9.762716, 9.763246, 9.767221, 9.764843, 9.767226, 9.770934, 9.770672, 9.771469, 9.774115, 9.771458, 9.770397, 9.774910, 9.771731, 9.775446, 9.775178, 9.772260, 9.781550, 9.778364, 9.780754, 9.779424, 9.781015, 9.779690, 9.781022, 9.782879, 9.785275, 9.783941, 9.789794, 9.789530, 9.790596, 9.783947, 9.786867, 9.790871, 9.790859, 9.788997, 9.790601, 9.788738, 9.787670, 9.786348, 9.784745, 9.787933, 9.790071, 9.793259, 9.794330, 9.793000, 9.792460, 9.796200, 9.792460, 9.791928, 9.793787, 9.792725, 9.795386, 9.795386, 9.795123, 9.795927, 9.795919, 9.797525, 9.799131, 9.795921, 9.801791, 9.802056, 9.797252, 9.794857, 9.795652, 9.795387, 9.800455, 9.799124, 9.802067, 9.802058, 9.801523, 9.799390, 9.802056, 9.800453, 9.800996, 9.803658, 9.802593, 9.805261, 9.801788, 9.804730, 9.807134, 9.805802, 9.804461, 9.806059, 9.807668, 9.806337, 9.807133, 9.807134, 9.802054, 9.806869, 9.814081, 9.809806, 9.804999, 9.807670, 9.809270, 9.810875, 9.807133, 9.809808, 9.807409, 9.810338, 9.807395, 9.805529, 9.806600, 9.809266, 9.812478, 9.808737, 9.808470, 9.809806, 9.805793, 9.805793, 9.810606, 9.810877, 9.808198, 9.807933, 9.811680, 9.809001, 9.812476, 9.810602, 9.808999, 9.810603, 9.806061, 9.810606, 9.811416, 9.810074, 9.813016, 9.807397, 9.806066, 9.812749, 9.809805, 9.813279, 9.809538, 9.811141, 9.811676, 9.810604, 9.816763, 9.813813, 9.811406, 9.819716, 9.819167, 9.814881, 9.816492, 9.815954, 9.810337, 9.811676, 9.815156, 9.816490, 9.814088, 9.810880, 9.817829, 9.817568, 9.815153, 9.814627, 9.815698, 9.816228, 9.818101, 9.817029, 9.818095, 9.809541, 9.814084 };
float _x[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200 };
float _y[] = { 9411.0f, 9364.0f, 9341.0f, 9327.0f, 9316.0f, 9304.0f, 9300.0f, 9291.0f, 9286.0f, 9280.0f, 9278.0f, 9276.0f, 9269.0f, 9270.0f, 9268.0f, 9262.0f, 9256.0f, 9258.0f, 9258.0f, 9252.0f, 9246.0f, 9248.0f, 9242.0f, 9244.0f, 9245.0f, 9241.0f, 9239.0f, 9238.0f, 9234.0f, 9232.0f, 9235.0f, 9227.0f, 9231.0f, 9231.0f, 9230.0f, 9231.0f, 9226.0f, 9222.0f, 9220.0f, 9226.0f, 9219.0f, 9214.0f, 9217.0f, 9219.0f, 9218.0f, 9215.0f, 9217.0f, 9215.0f, 9211.0f, 9211.0f, 9211.0f, 9208.0f, 9211.0f, 9212.0f, 9207.0f, 9210.0f, 9207.0f, 9207.0f, 9210.0f, 9201.0f, 9204.0f, 9202.0f, 9203.0f, 9202.0f, 9203.0f, 9202.0f, 9200.0f, 9198.0f, 9199.0f, 9193.0f, 9194.0f, 9193.0f, 9199.0f, 9196.0f, 9192.0f, 9192.0f, 9194.0f, 9193.0f, 9194.0f, 9195.0f, 9197.0f, 9198.0f, 9195.0f, 9193.0f, 9190.0f, 9189.0f, 9190.0f, 9191.0f, 9187.0f, 9191.0f, 9191.0f, 9190.0f, 9191.0f, 9188.0f, 9188.0f, 9188.0f, 9188.0f, 9188.0f, 9186.0f, 9185.0f, 9188.0f, 9182.0f, 9182.0f, 9186.0f, 9189.0f, 9188.0f, 9188.0f, 9183.0f, 9185.0f, 9182.0f, 9182.0f, 9182.0f, 9184.0f, 9182.0f, 9183.0f, 9183.0f, 9180.0f, 9181.0f, 9179.0f, 9182.0f, 9179.0f, 9177.0f, 9178.0f, 9180.0f, 9178.0f, 9177.0f, 9178.0f, 9177.0f, 9177.0f, 9182.0f, 9177.0f, 9171.0f, 9175.0f, 9179.0f, 9177.0f, 9175.0f, 9174.0f, 9177.0f, 9175.0f, 9177.0f, 9174.0f, 9177.0f, 9179.0f, 9178.0f, 9175.0f, 9172.0f, 9176.0f, 9176.0f, 9175.0f, 9178.0f, 9178.0f, 9174.0f, 9174.0f, 9176.0f, 9176.0f, 9173.0f, 9175.0f, 9172.0f, 9174.0f, 9175.0f, 9174.0f, 9178.0f, 9174.0f, 9173.0f, 9174.0f, 9172.0f, 9177.0f, 9178.0f, 9172.0f, 9175.0f, 9171.0f, 9175.0f, 9173.0f, 9173.0f, 9174.0f, 9168.0f, 9171.0f, 9173.0f, 9165.0f, 9166.0f, 9170.0f, 9168.0f, 9169.0f, 9174.0f, 9173.0f, 9170.0f, 9168.0f, 9171.0f, 9174.0f, 9167.0f, 9167.0f, 9170.0f, 9170.0f, 9169.0f, 9169.0f, 9167.0f, 9168.0f, 9167.0f, 9175.0f, 9171.0f};

int N, K;
volatile float M;
//N - number of data points
//K - polinom power
//K<=N

void freematrix() {
    //free memory for matrixes
    /*int i;
    for (i = 0; i < K + 1; i++) {
        delete[] sums[i];
    }
    delete[] a;
    delete[] b;
    delete[] x;
    delete[] y;
    delete[] sums;
    */
}

void allocmatrix() {
    int i, j, k;
    for (i = 0; i < K + 1; i++) {
        a[i] = 0;
        b[i] = 0;
        for (j = 0; j < K + 1; j++) {
            sums[i][j] = 0;
        }
    }
    for (k = 0; k < N; k++) {
        x[k] = 0;
        y[k] = 0;
    }
}

void readmatrix() {
    int i = 0, j = 0, k = 0;
    //read x, y matrixes from input file
    for (k = 0; k < N; k++) {
        x[k] = _x[k];
        y[k] = _y[k];
    }
    //init square sums matrix
    for (i = 0; i < K + 1; i++) {
        for (j = 0; j < K + 1; j++) {
            sums[i][j] = 0;
            for (k = 0; k < N; k++) {
                sums[i][j] += powf(x[k], i + j);
            }
        }
    }
    //init free coefficients column
    for (i = 0; i < K + 1; i++) {
        for (k = 0; k < N; k++) {
            b[i] += powf(x[k], i) * y[k];
        }
    }
}

void printresult() {
    //print polynom parameters
    int i = 0;
    //printf("\n");
    for (i = 0; i < K + 1; i++) {
        //aa[i] = a[i];
    }
}

void diagonal() {
    int i, j, k;
    float temp = 0;
    for (i = 0; i < K + 1; i++) {
        if (sums[i][i] == 0) {
            for (j = 0; j < K + 1; j++) {
                if (j == i) continue;
                if (sums[j][i] != 0 && sums[i][j] != 0) {
                    for (k = 0; k < K + 1; k++) {
                        temp = sums[j][k];
                        sums[j][k] = sums[i][k];
                        sums[i][k] = temp;
                    }
                    temp = b[j];
                    b[j] = b[i];
                    b[i] = temp;
                    break;
                }
            }
        }
    }
}

void printmatrix() {
    //print matrix "a"
    int i = 0, j = 0;
    //printf("\n");
    for (i = 0; i < K + 1; i++) {
        for (j = 0; j < K + 1; j++) {
            //printf(" %f : %d ", sums[i][j], j);
        }
        //printf(" = %f\n", b[i]);
    }
}


void aproxy() {
    int i = 0, j = 0, k = 0;

    N = 31;

    printf("\nNumber of points: N=%d", N);
    do {
        //printf("\nInput power of approximation polinom K<N: ");
        //scanf_s("%d", &K);
    	K = 10;
    } while (K >= N);

    allocmatrix();

    //read data from file
    readmatrix();

    //check if there are 0 on main diagonal and exchange rows in that case
    diagonal();

    //process rows
    for (k = 0; k < K + 1; k++) {
        for (i = k + 1; i < K + 1; i++) {
            if (sums[k][k] == 0)
            	return; // NO SOLUTION! ERROR HANDLER !!!!
            M = sums[i][k] / sums[k][k];
            for (j = k; j < K + 1; j++) {
            	sums[i][j] -= M * sums[k][j];
            }
            b[i] -= M * b[k];
        }
    }
    //printmatrix();
    for (i = (K + 1) - 1; i >= 0; i--) {
    	float s = 0;
        for (j = i; j < K + 1; j++) {
            s = s + sums[i][j] * a[j];
        }
        a[i] = (b[i] - s) / sums[i][i];
    }
    printresult();
    freematrix();
}
